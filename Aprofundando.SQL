/*
Funcoes em SQL

IFNULL(COLUMN,STRING); - FUNCAO COM PARAMENTRO

*/

--Nome email cliente estado;

SELECT C.NOME, C.EMAIL, E.ESTADO, T.NUMERO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON E.IDCLIENTE = E.IDCLIENTE
INNER JOIN TELEFONE T
ON T.IDCLIENTE = T.IDCLIENTE;

SELECT 
	   C.NOME, 
IFNULL(C.EMAIL,'NÃO TEM EMAIL') AS "E-MAIL", 
	   E.ESTADO, 
	   T.NUMERO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON E.IDCLIENTE = E.IDCLIENTE
INNER JOIN TELEFONE T
ON T.IDCLIENTE = T.IDCLIENTE;

/*VIEWS É UMA VISAO (FUNCIONA COMO UM PONTEIRO)
ELA NAO DUPLICA OS DADOS DA TABELA ELA E BASICAMENTE UMA TABELA VIRTUAL
*/

SELECT 
	C.NOME, 
	C.EMAIL,
	C.TIPO,
	T.NUMERO,
	E.BAIRRO,
	E.CIDADE, 
	E.ESTADO
FROM CLIENTE C
INNER JOIN TELEFONE T
ON T.IDCLIENTE = T.IDCLIENTE
INNER JOIN ENDERECO E
ON E.IDCLIENTE = E.IDCLIENTE;

--CRIANDO VIEW

CREATE VIEW RELATORIO AS 
SELECT 
	C.NOME, 
	C.EMAIL,
	C.TIPO,
	T.NUMERO,
	E.BAIRRO,
	E.CIDADE, 
	E.ESTADO
FROM CLIENTE C
INNER JOIN TELEFONE T
ON T.IDCLIENTE = T.IDCLIENTE
INNER JOIN ENDERECO E
ON E.IDCLIENTE = E.IDCLIENTE;

--CHAMANDO VIEW
SELECT * FROM RELATORIO;

--SHOW TABLES;
--SHOW DATABASES;
--SHOW VIEWS NAO EXISTE

--APAGAR VIEW
DROP VIEW RELATORIO;

/*DEFINIR UM PREFIXO PARA FACILITAR A LOCALIZACAO DA VIEW*/

CREATE VIEW v_RELATORIO AS 
SELECT 
	C.NOME, 
IFNULL(C.EMAIL,'NÃO TEM EMAIL') AS "E-MAIL", 
	C.TIPO,
	T.NUMERO,
	E.BAIRRO,
	E.CIDADE, 
	E.ESTADO
FROM CLIENTE C
INNER JOIN TELEFONE T
ON T.IDCLIENTE = T.IDCLIENTE
INNER JOIN ENDERECO E
ON E.IDCLIENTE = E.IDCLIENTE;

SELECT NOME, NUMERO, ESTADO
FROM V_RELATORIO

/* DML ATRAVES DA VIEW*/
--UPDATE INSERT E DELETE

INSERT INTO V_RELATORIO VALUES(
'ANDREIA','F','ANDREIA@A.COM','CEL','123423423','CENTRO','VITORIA','ES'
);
--- ERRO NAO PODE INSERIR EM VIEW COM JOIN 

DELETE FROM V_RELATORIO
WHERE NOME = 'JORGE'

--- ERRO NAO PODE DELETAR EM VIEW COM JOIN 

UPDATE V_RELATORIO SET
NOME = 'JORGE' 
WHERE NOME = 'JOAO'
--E POSSIVEL FAZER UPDATE NA VIEWS
--POREM OS DADOS SAO ALTERADOS NA TABELA PRINCIPAL

CREATE TABLE JOGADORES(
	IDJOGADOR INT,
	NOME VARCHAR(30),
	ESTADO CHAR(2)
);

INSERT INTO JOGADORES VALUES(1,'GUERREIRO','RS');
INSERT INTO JOGADORES VALUES(2,'GABIGOL','RJ');
INSERT INTO JOGADORES VALUES(3,'GANSO','SP');

--CRIANDO VIEW

CREATE VIEW V_JOGADORES AS 
SELECT NOME, ESTADO
FROM JOGADORES;

SELECT * FROM V_JOGADORES;

INSERT INTO V_JOGADORES VALUES(
'ANDREIA','F','ANDREIA@A.COM','CEL','123423423','CENTRO','VITORIA','ES'
);
--E POSSIVEL INSERIR NA QUERY SEM JOIN

DELETE FROM V_JOGADORES
WHERE NOME = 'GUERREIRO'
--E POSSIVEL INSERIR SEM JOIN

UPDATE V_JOGADORES SET
NOME = 'JORGE' 
WHERE NOME = 'JOAO'

-- E POSSIVEL MAS DEVE FICAR ATENTO COM AS RESTRICOES

/*ORDENANDO DADOS COM ORDER BY*/

CREATE TABLE ALUNOS(
	NUMERO INT,
	NOME VARCHAR(30)
);

INSERT INTO ALUNOS VALUES(1,'JOAO');
INSERT INTO ALUNOS VALUES(2,'ANA');
INSERT INTO ALUNOS VALUES(3,'CLARA');
INSERT INTO ALUNOS VALUES(4,'MAFRA');
INSERT INTO ALUNOS VALUES(5,'ZOE');
INSERT INTO ALUNOS VALUES(1,'ZONA');
INSERT INTO ALUNOS VALUES(2,'MAFRO');

--ORDERNADO

SELECT * FROM ALUNOS
ORDER BY NUMERO;

--ORDERNAR POR INDICE SO PODE SER USANDO SE TIVER A QUANTIDADE DE PROJECOES
SELECT * FROM ALUNOS
ORDER BY 1;

SELECT * FROM ALUNOS
ORDER BY 2;

--ORDENAR POR MAIS DE UMA COLUNA

SELECT * FROM ALUNOS
ORDER BY NUMERO, NOME;

SELECT * FROM ALUNOS
ORDER BY 1, 2;

/*ORDER BY DESC E ASC*/

SELECT * FROM ALUNOS 
ORDER BY 1 ASC;
--PADRAO ASCENDENTE


SELECT * FROM ALUNOS 
ORDER BY 1 DESC;
--DESCENDENTE

SELECT * FROM ALUNOS 
ORDER BY 1,2 DESC;

SELECT * FROM ALUNOS 
ORDER BY 1 DESC,2 DESC;

/*ORDENDANDO COM JOIN*/

SELECT 
	C.NOME, 
IFNULL(C.EMAIL,'NÃO TEM EMAIL') AS "E-MAIL", 
	C.TIPO,
	T.NUMERO,
	E.BAIRRO,
	E.CIDADE, 
	E.ESTADO
FROM CLIENTE C
INNER JOIN TELEFONE T
ON T.IDCLIENTE = T.IDCLIENTE
INNER JOIN ENDERECO E
ON E.IDCLIENTE = E.IDCLIENTE
ORDER BY 1;

/*ORDENANDO VIEW*/
SELECT * FROM V_JOGADORES
ORDER BY 1;